version: '3.8'

services:
  contractai-api:
    build: .
    restart: unless-stopped
    container_name: contractai-api
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=your-secret-key
      - ENVIRONMENT=development
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=documents
      - MINIO_SECURE=false
      - TESSERACT_LANGUAGE=eng
      - MAX_FILE_SIZE_MB=10
      - MAX_PDF_PAGES=50
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app  # For development hot reloading
    depends_on:
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  minio:
    image: minio/minio:latest
    container_name: contractai-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # In a production setup, you'd include a PostgreSQL service here
  # postgres:
  #   image: postgres:14-alpine
  #   container_name: contractai-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: contractai
  #     POSTGRES_PASSWORD: contractai
  #     POSTGRES_DB: contractai
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U contractai"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s

volumes:
  minio_data:
  # postgres_data:

networks:
  default:
    name: contractai-network
